//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship TapizHasWindow
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("be424390-c05a-4e09-a2aa-b37c42c2996a")]
	public partial class TapizHasWindow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasWindow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbe424390, 0xc05a, 0x4e09, 0xa2, 0xaa, 0xb3, 0x7c, 0x42, 0xc2, 0x99, 0x6a);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasWindow link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">Window to use as the target of the relationship.</param>
		public TapizHasWindow(Tapiz source, Window target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasWindow.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasWindow.WindowDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasWindow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasWindow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasWindow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasWindow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0xe40c86f3, 0xe2de, 0x4c4b, 0x97, 0x45, 0x6b, 0x85, 0xdb, 0xa4, 0x7b, 0x06);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow/Tapiz.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow/Tapiz.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Window", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("e40c86f3-e2de-4c4b-9745-6b85dba47b06")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a Window
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(Window element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, WindowDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(Window element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, WindowDomainRoleId, newTapiz);
		}
		#endregion
		#region Window domain role code
		
		/// <summary>
		/// Window domain role Id.
		/// </summary>
		public static readonly global::System.Guid WindowDomainRoleId = new global::System.Guid(0x8438843d, 0xf0e9, 0x42ab, 0xb9, 0x33, 0xaf, 0xb9, 0x90, 0xd3, 0xc5, 0xbb);
		
		/// <summary>
		/// DomainRole Window
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.Window
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow/Window.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow/Window.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow/Window.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("8438843d-f0e9-42ab-b933-afb990d3c5bb")]
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Window)DslModeling::DomainRoleInfo.GetRolePlayer(this, WindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Window of a Tapiz
		/// <summary>
		/// Gets a list of Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Window> GetWindow(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Window>, Window>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasWindow links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow> GetLinksToWindow ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow>(tapizInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.TapizDomainRoleId);
		}
		#endregion
		#region Window link accessor
		/// <summary>
		/// Get the TapizHasWindow link to a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow GetLinkToTapiz (global::UPM_IPS.RGRLLCAMSProyectoMDD.Window windowInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow>(windowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.WindowDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Window not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasWindow instance accessors
		
		/// <summary>
		/// Get any TapizHasWindow links between a given Tapiz and a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Window target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.TapizDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow link in links )
			{
				if ( target.Equals(link.Window) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasWindow link between a given Tapizand a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Window target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.TapizDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow link in links )
			{
				if ( target.Equals(link.Window) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship SecondaryWindowReferencesTargetSecondaryWindow
	/// Description for
	/// UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("6012798a-400b-47fd-b3b7-19002e8c3be8")]
	public partial class SecondaryWindowReferencesTargetSecondaryWindow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// SecondaryWindowReferencesTargetSecondaryWindow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x6012798a, 0x400b, 0x47fd, 0xb3, 0xb7, 0x19, 0x00, 0x2e, 0x8c, 0x3b, 0xe8);
	
				
		/// <summary>
		/// Constructor
		/// Creates a SecondaryWindowReferencesTargetSecondaryWindow link in the same Partition as the given SecondaryWindow
		/// </summary>
		/// <param name="source">SecondaryWindow to use as the source of the relationship.</param>
		/// <param name="target">SecondaryWindow to use as the target of the relationship.</param>
		public SecondaryWindowReferencesTargetSecondaryWindow(SecondaryWindow source, SecondaryWindow target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindowDomainRoleId, source), new DslModeling::RoleAssignment(SecondaryWindowReferencesTargetSecondaryWindow.TargetSecondaryWindowDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SecondaryWindowReferencesTargetSecondaryWindow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SecondaryWindowReferencesTargetSecondaryWindow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public SecondaryWindowReferencesTargetSecondaryWindow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public SecondaryWindowReferencesTargetSecondaryWindow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region SourceSecondaryWindow domain role code
		
		/// <summary>
		/// SourceSecondaryWindow domain role Id.
		/// </summary>
		public static readonly global::System.Guid SourceSecondaryWindowDomainRoleId = new global::System.Guid(0x6ab63a09, 0x172b, 0x4ddc, 0xb7, 0xce, 0x37, 0x83, 0x29, 0x1b, 0x20, 0xeb);
		
		/// <summary>
		/// DomainRole SourceSecondaryWindow
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindow
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow/SourceSecondaryWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow/SourceSecondaryWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "TargetSecondaryWindow", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow/SourceSecondaryWindow.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("6ab63a09-172b-4ddc-b7ce-3783291b20eb")]
		public virtual SecondaryWindow SourceSecondaryWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SecondaryWindow)DslModeling::DomainRoleInfo.GetRolePlayer(this, SourceSecondaryWindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SourceSecondaryWindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SourceSecondaryWindow of a SecondaryWindow
		/// <summary>
		/// Gets a list of SourceSecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SecondaryWindow> GetSourceSecondaryWindow(SecondaryWindow element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SecondaryWindow>, SecondaryWindow>(element, TargetSecondaryWindowDomainRoleId);
		}
		#endregion
		#region TargetSecondaryWindow domain role code
		
		/// <summary>
		/// TargetSecondaryWindow domain role Id.
		/// </summary>
		public static readonly global::System.Guid TargetSecondaryWindowDomainRoleId = new global::System.Guid(0xd663c383, 0x9627, 0x4988, 0x96, 0xcc, 0x31, 0xb8, 0x18, 0x4e, 0xcf, 0x12);
		
		/// <summary>
		/// DomainRole TargetSecondaryWindow
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.TargetSecondaryWindow
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow/TargetSecondaryWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow/TargetSecondaryWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "SourceSecondaryWindow", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow/TargetSecondaryWindow.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("d663c383-9627-4988-96cc-31b8184ecf12")]
		public virtual SecondaryWindow TargetSecondaryWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SecondaryWindow)DslModeling::DomainRoleInfo.GetRolePlayer(this, TargetSecondaryWindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TargetSecondaryWindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access TargetSecondaryWindow of a SecondaryWindow
		/// <summary>
		/// Gets a list of TargetSecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SecondaryWindow> GetTargetSecondaryWindow(SecondaryWindow element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SecondaryWindow>, SecondaryWindow>(element, SourceSecondaryWindowDomainRoleId);
		}
		#endregion
		#region SourceSecondaryWindow link accessor
		/// <summary>
		/// Get the list of SecondaryWindowReferencesTargetSecondaryWindow links to a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow> GetLinksToTargetSecondaryWindow ( global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow sourceSecondaryWindowInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow>(sourceSecondaryWindowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindowDomainRoleId);
		}
		#endregion
		#region TargetSecondaryWindow link accessor
		/// <summary>
		/// Get the list of SecondaryWindowReferencesTargetSecondaryWindow links to a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow> GetLinksToSourceSecondaryWindow ( global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow targetSecondaryWindowInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow>(targetSecondaryWindowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.TargetSecondaryWindowDomainRoleId);
		}
		#endregion
		#region SecondaryWindowReferencesTargetSecondaryWindow instance accessors
		
		/// <summary>
		/// Get any SecondaryWindowReferencesTargetSecondaryWindow links between a given SecondaryWindow and a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow source, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow link in links )
			{
				if ( target.Equals(link.TargetSecondaryWindow) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one SecondaryWindowReferencesTargetSecondaryWindow link between a given SecondaryWindowand a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow source, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow link in links )
			{
				if ( target.Equals(link.TargetSecondaryWindow) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship WindowHasMenu
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("3c187869-ba1a-4d83-b4a0-c3c4b30908a4")]
	public partial class WindowHasMenu : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// WindowHasMenu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x3c187869, 0xba1a, 0x4d83, 0xb4, 0xa0, 0xc3, 0xc4, 0xb3, 0x09, 0x08, 0xa4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a WindowHasMenu link in the same Partition as the given Window
		/// </summary>
		/// <param name="source">Window to use as the source of the relationship.</param>
		/// <param name="target">Menu to use as the target of the relationship.</param>
		public WindowHasMenu(Window source, Menu target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(WindowHasMenu.WindowDomainRoleId, source), new DslModeling::RoleAssignment(WindowHasMenu.MenuDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WindowHasMenu(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WindowHasMenu(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WindowHasMenu(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WindowHasMenu(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Window domain role code
		
		/// <summary>
		/// Window domain role Id.
		/// </summary>
		public static readonly global::System.Guid WindowDomainRoleId = new global::System.Guid(0x5003253b, 0x6fa9, 0x4f9d, 0xb9, 0xb7, 0x62, 0xbf, 0x9f, 0x26, 0x8b, 0x21);
		
		/// <summary>
		/// DomainRole Window
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.Window
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu/Window.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu/Window.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Menu", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu/Window.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("5003253b-6fa9-4f9d-b9b7-62bf9f268b21")]
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Window)DslModeling::DomainRoleInfo.GetRolePlayer(this, WindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Window of a Menu
		/// <summary>
		/// Gets Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Window GetWindow(Menu element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, MenuDomainRoleId) as Window;
		}
		
		/// <summary>
		/// Sets Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetWindow(Menu element, Window newWindow)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, MenuDomainRoleId, newWindow);
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x074963f3, 0x6ba3, 0x411c, 0xad, 0x24, 0xd7, 0xdd, 0xdc, 0xe5, 0x44, 0x57);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu/Menu.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu/Menu.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Window", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu/Menu.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("074963f3-6ba3-411c-ad24-d7dddce54457")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a Window
		/// <summary>
		/// Gets a list of Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Menu> GetMenu(Window element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(element, WindowDomainRoleId);
		}
		#endregion
		#region Window link accessor
		/// <summary>
		/// Get the list of WindowHasMenu links to a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu> GetLinksToMenu ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Window windowInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu>(windowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.WindowDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the WindowHasMenu link to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu GetLinkToWindow (global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu menuInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu>(menuInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.MenuDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Menu not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region WindowHasMenu instance accessors
		
		/// <summary>
		/// Get any WindowHasMenu links between a given Window and a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.Window source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.WindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one WindowHasMenu link between a given Windowand a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.Window source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.WindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu link in links )
			{
				if ( target.Equals(link.Menu) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship WindowHasButton
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d4a21c5d-3b46-4447-a51c-d1c0851342ee")]
	public partial class WindowHasButton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// WindowHasButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd4a21c5d, 0x3b46, 0x4447, 0xa5, 0x1c, 0xd1, 0xc0, 0x85, 0x13, 0x42, 0xee);
	
				
		/// <summary>
		/// Constructor
		/// Creates a WindowHasButton link in the same Partition as the given Window
		/// </summary>
		/// <param name="source">Window to use as the source of the relationship.</param>
		/// <param name="target">Button to use as the target of the relationship.</param>
		public WindowHasButton(Window source, Button target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(WindowHasButton.WindowDomainRoleId, source), new DslModeling::RoleAssignment(WindowHasButton.ButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WindowHasButton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WindowHasButton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public WindowHasButton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public WindowHasButton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Window domain role code
		
		/// <summary>
		/// Window domain role Id.
		/// </summary>
		public static readonly global::System.Guid WindowDomainRoleId = new global::System.Guid(0x42e7305d, 0xe729, 0x4ebb, 0xa5, 0x9a, 0xd5, 0x00, 0x3e, 0xfc, 0x41, 0xef);
		
		/// <summary>
		/// DomainRole Window
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.Window
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton/Window.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton/Window.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Button", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton/Window.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("42e7305d-e729-4ebb-a59a-d5003efc41ef")]
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Window)DslModeling::DomainRoleInfo.GetRolePlayer(this, WindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, WindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Window of a Button
		/// <summary>
		/// Gets Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Window GetWindow(Button element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ButtonDomainRoleId) as Window;
		}
		
		/// <summary>
		/// Sets Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetWindow(Button element, Window newWindow)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ButtonDomainRoleId, newWindow);
		}
		#endregion
		#region Button domain role code
		
		/// <summary>
		/// Button domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonDomainRoleId = new global::System.Guid(0x419a1442, 0x4a52, 0x4435, 0x8d, 0xcb, 0x83, 0xb6, 0x33, 0x76, 0x77, 0xe3);
		
		/// <summary>
		/// DomainRole Button
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.Button
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton/Button.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton/Button.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Window", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton/Button.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("419a1442-4a52-4435-8dcb-83b6337677e3")]
		public virtual Button Button
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Button)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Button of a Window
		/// <summary>
		/// Gets a list of Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Button> GetButton(Window element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Button>, Button>(element, WindowDomainRoleId);
		}
		#endregion
		#region Window link accessor
		/// <summary>
		/// Get the list of WindowHasButton links to a Window.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton> GetLinksToButton ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Window windowInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton>(windowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.WindowDomainRoleId);
		}
		#endregion
		#region Button link accessor
		/// <summary>
		/// Get the WindowHasButton link to a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton GetLinkToWindow (global::UPM_IPS.RGRLLCAMSProyectoMDD.Button buttonInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton>(buttonInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.ButtonDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Button not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region WindowHasButton instance accessors
		
		/// <summary>
		/// Get any WindowHasButton links between a given Window and a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.Window source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Button target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.WindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton link in links )
			{
				if ( target.Equals(link.Button) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one WindowHasButton link between a given Windowand a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.Window source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Button target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.WindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton link in links )
			{
				if ( target.Equals(link.Button) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship MenuHasItem
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("d0322e66-48a1-467f-a4f9-40151627f767")]
	public partial class MenuHasItem : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MenuHasItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xd0322e66, 0x48a1, 0x467f, 0xa4, 0xf9, 0x40, 0x15, 0x16, 0x27, 0xf7, 0x67);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MenuHasItem link in the same Partition as the given Menu
		/// </summary>
		/// <param name="source">Menu to use as the source of the relationship.</param>
		/// <param name="target">Item to use as the target of the relationship.</param>
		public MenuHasItem(Menu source, Item target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MenuHasItem.MenuDomainRoleId, source), new DslModeling::RoleAssignment(MenuHasItem.ItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasItem(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasItem(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MenuHasItem(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MenuHasItem(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Menu domain role code
		
		/// <summary>
		/// Menu domain role Id.
		/// </summary>
		public static readonly global::System.Guid MenuDomainRoleId = new global::System.Guid(0x4333decc, 0xd0b2, 0x4dd2, 0x89, 0xbd, 0xbe, 0x15, 0xef, 0x0c, 0x7e, 0x5b);
		
		/// <summary>
		/// DomainRole Menu
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.Menu
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem/Menu.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem/Menu.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Item", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem/Menu.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4333decc-d0b2-4dd2-89bd-be15ef0c7e5b")]
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Menu)DslModeling::DomainRoleInfo.GetRolePlayer(this, MenuDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MenuDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Menu of a Item
		/// <summary>
		/// Gets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Menu GetMenu(Item element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, ItemDomainRoleId) as Menu;
		}
		
		/// <summary>
		/// Sets Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMenu(Item element, Menu newMenu)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, ItemDomainRoleId, newMenu);
		}
		#endregion
		#region Item domain role code
		
		/// <summary>
		/// Item domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemDomainRoleId = new global::System.Guid(0x5299fbd8, 0x1a97, 0x432f, 0x8d, 0xa9, 0xd5, 0xa0, 0x2e, 0xe6, 0x59, 0xd4);
		
		/// <summary>
		/// DomainRole Item
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.Item
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem/Item.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem/Item.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Menu", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem/Item.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("5299fbd8-1a97-432f-8da9-d5a02ee659d4")]
		public virtual Item Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Item of a Menu
		/// <summary>
		/// Gets a list of Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Item> GetItem(Menu element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(element, MenuDomainRoleId);
		}
		#endregion
		#region Menu link accessor
		/// <summary>
		/// Get the list of MenuHasItem links to a Menu.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem> GetLinksToItem ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu menuInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem>(menuInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.MenuDomainRoleId);
		}
		#endregion
		#region Item link accessor
		/// <summary>
		/// Get the MenuHasItem link to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem GetLinkToMenu (global::UPM_IPS.RGRLLCAMSProyectoMDD.Item itemInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem>(itemInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.ItemDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of Item not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MenuHasItem instance accessors
		
		/// <summary>
		/// Get any MenuHasItem links between a given Menu and a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Item target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.MenuDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem link in links )
			{
				if ( target.Equals(link.Item) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MenuHasItem link between a given Menuand a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Item target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.MenuDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem link in links )
			{
				if ( target.Equals(link.Item) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship TapizHasEnd
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship(IsEmbedding=true)]
	[DslModeling::DomainObjectId("fa09e36e-917c-4b38-8318-6a1101647475")]
	public partial class TapizHasEnd : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// TapizHasEnd domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfa09e36e, 0x917c, 0x4b38, 0x83, 0x18, 0x6a, 0x11, 0x01, 0x64, 0x74, 0x75);
	
				
		/// <summary>
		/// Constructor
		/// Creates a TapizHasEnd link in the same Partition as the given Tapiz
		/// </summary>
		/// <param name="source">Tapiz to use as the source of the relationship.</param>
		/// <param name="target">End to use as the target of the relationship.</param>
		public TapizHasEnd(Tapiz source, End target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(TapizHasEnd.TapizDomainRoleId, source), new DslModeling::RoleAssignment(TapizHasEnd.EndDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasEnd(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasEnd(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public TapizHasEnd(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public TapizHasEnd(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region Tapiz domain role code
		
		/// <summary>
		/// Tapiz domain role Id.
		/// </summary>
		public static readonly global::System.Guid TapizDomainRoleId = new global::System.Guid(0x2650324d, 0xf3c2, 0x4df1, 0xaf, 0xeb, 0x71, 0xf1, 0xe5, 0x51, 0xd6, 0xa5);
		
		/// <summary>
		/// DomainRole Tapiz
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.Tapiz
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd/Tapiz.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd/Tapiz.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "End", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd/Tapiz.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.PropagatesCopyToLinkAndOppositeRolePlayer, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("2650324d-f3c2-4df1-afeb-71f1e551d6a5")]
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Tapiz)DslModeling::DomainRoleInfo.GetRolePlayer(this, TapizDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, TapizDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Tapiz of a End
		/// <summary>
		/// Gets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static Tapiz GetTapiz(End element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, EndDomainRoleId) as Tapiz;
		}
		
		/// <summary>
		/// Sets Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetTapiz(End element, Tapiz newTapiz)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, EndDomainRoleId, newTapiz);
		}
		#endregion
		#region End domain role code
		
		/// <summary>
		/// End domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndDomainRoleId = new global::System.Guid(0x43a03c83, 0xc8b3, 0x4670, 0x89, 0xad, 0x15, 0xb7, 0x4e, 0xaa, 0x70, 0x7f);
		
		/// <summary>
		/// DomainRole End
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.End
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd/End.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd/End.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "Tapiz", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd/End.PropertyDisplayName", PropagatesDelete = true,  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.One)]
		[DslModeling::DomainObjectId("43a03c83-c8b3-4670-89ad-15b74eaa707f")]
		public virtual End End
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (End)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access End of a Tapiz
		/// <summary>
		/// Gets a list of End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<End> GetEnd(Tapiz element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<End>, End>(element, TapizDomainRoleId);
		}
		#endregion
		#region Tapiz link accessor
		/// <summary>
		/// Get the list of TapizHasEnd links to a Tapiz.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd> GetLinksToEnd ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz tapizInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd>(tapizInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.TapizDomainRoleId);
		}
		#endregion
		#region End link accessor
		/// <summary>
		/// Get the TapizHasEnd link to a End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd GetLinkToTapiz (global::UPM_IPS.RGRLLCAMSProyectoMDD.End endInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd>(endInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.EndDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of End not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region TapizHasEnd instance accessors
		
		/// <summary>
		/// Get any TapizHasEnd links between a given Tapiz and a End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz source, global::UPM_IPS.RGRLLCAMSProyectoMDD.End target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.TapizDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd link in links )
			{
				if ( target.Equals(link.End) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one TapizHasEnd link between a given Tapizand a End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz source, global::UPM_IPS.RGRLLCAMSProyectoMDD.End target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.TapizDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd link in links )
			{
				if ( target.Equals(link.End) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship EndReferencesButton
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("bdf23d86-1890-42a2-8af5-ef8330b559f4")]
	public partial class EndReferencesButton : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EndReferencesButton domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xbdf23d86, 0x1890, 0x42a2, 0x8a, 0xf5, 0xef, 0x83, 0x30, 0xb5, 0x59, 0xf4);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EndReferencesButton link in the same Partition as the given End
		/// </summary>
		/// <param name="source">End to use as the source of the relationship.</param>
		/// <param name="target">Button to use as the target of the relationship.</param>
		public EndReferencesButton(End source, Button target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EndReferencesButton.EndDomainRoleId, source), new DslModeling::RoleAssignment(EndReferencesButton.ButtonDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndReferencesButton(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndReferencesButton(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndReferencesButton(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndReferencesButton(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region End domain role code
		
		/// <summary>
		/// End domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndDomainRoleId = new global::System.Guid(0xf66a00e9, 0x9493, 0x443f, 0xa9, 0x15, 0x78, 0x18, 0x26, 0xc9, 0x43, 0xea);
		
		/// <summary>
		/// DomainRole End
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.End
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton/End.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton/End.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Button", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton/End.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("f66a00e9-9493-443f-a915-781826c943ea")]
		public virtual End End
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (End)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access End of a Button
		/// <summary>
		/// Gets a list of End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<End> GetEnd(Button element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<End>, End>(element, ButtonDomainRoleId);
		}
		#endregion
		#region Button domain role code
		
		/// <summary>
		/// Button domain role Id.
		/// </summary>
		public static readonly global::System.Guid ButtonDomainRoleId = new global::System.Guid(0x1ebf65f2, 0x9845, 0x4d06, 0x97, 0x97, 0x0a, 0xfb, 0x25, 0xa5, 0x95, 0x9a);
		
		/// <summary>
		/// DomainRole Button
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.Button
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton/Button.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton/Button.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "End", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton/Button.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("1ebf65f2-9845-4d06-9797-0afb25a5959a")]
		public virtual Button Button
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Button)DslModeling::DomainRoleInfo.GetRolePlayer(this, ButtonDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ButtonDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Button of a End
		/// <summary>
		/// Gets a list of Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Button> GetButton(End element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Button>, Button>(element, EndDomainRoleId);
		}
		#endregion
		#region End link accessor
		/// <summary>
		/// Get the list of EndReferencesButton links to a End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton> GetLinksToButton ( global::UPM_IPS.RGRLLCAMSProyectoMDD.End endInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton>(endInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.EndDomainRoleId);
		}
		#endregion
		#region Button link accessor
		/// <summary>
		/// Get the list of EndReferencesButton links to a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton> GetLinksToEnd ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Button buttonInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton>(buttonInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.ButtonDomainRoleId);
		}
		#endregion
		#region EndReferencesButton instance accessors
		
		/// <summary>
		/// Get any EndReferencesButton links between a given End and a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.End source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Button target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.EndDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton link in links )
			{
				if ( target.Equals(link.Button) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EndReferencesButton link between a given Endand a Button.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.End source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Button target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.EndDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton link in links )
			{
				if ( target.Equals(link.Button) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship EndReferencesItem
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("b4eb92db-b44a-42d2-9dcf-8b293e43ae58")]
	public partial class EndReferencesItem : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// EndReferencesItem domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xb4eb92db, 0xb44a, 0x42d2, 0x9d, 0xcf, 0x8b, 0x29, 0x3e, 0x43, 0xae, 0x58);
	
				
		/// <summary>
		/// Constructor
		/// Creates a EndReferencesItem link in the same Partition as the given End
		/// </summary>
		/// <param name="source">End to use as the source of the relationship.</param>
		/// <param name="target">Item to use as the target of the relationship.</param>
		public EndReferencesItem(End source, Item target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(EndReferencesItem.EndDomainRoleId, source), new DslModeling::RoleAssignment(EndReferencesItem.ItemDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndReferencesItem(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndReferencesItem(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public EndReferencesItem(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public EndReferencesItem(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region End domain role code
		
		/// <summary>
		/// End domain role Id.
		/// </summary>
		public static readonly global::System.Guid EndDomainRoleId = new global::System.Guid(0x4273bc8b, 0x991d, 0x4e49, 0xa6, 0x7f, 0xd0, 0x9b, 0x4d, 0xc5, 0xf8, 0x9c);
		
		/// <summary>
		/// DomainRole End
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.End
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem/End.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem/End.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "Item", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem/End.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("4273bc8b-991d-4e49-a67f-d09b4dc5f89c")]
		public virtual End End
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (End)DslModeling::DomainRoleInfo.GetRolePlayer(this, EndDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, EndDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access End of a Item
		/// <summary>
		/// Gets a list of End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<End> GetEnd(Item element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<End>, End>(element, ItemDomainRoleId);
		}
		#endregion
		#region Item domain role code
		
		/// <summary>
		/// Item domain role Id.
		/// </summary>
		public static readonly global::System.Guid ItemDomainRoleId = new global::System.Guid(0xa92327ba, 0x8282, 0x4649, 0x93, 0xa5, 0xf2, 0x56, 0x51, 0xbb, 0xfb, 0x42);
		
		/// <summary>
		/// DomainRole Item
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.Item
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem/Item.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem/Item.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "End", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem/Item.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("a92327ba-8282-4649-93a5-f25651bbfb42")]
		public virtual Item Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (Item)DslModeling::DomainRoleInfo.GetRolePlayer(this, ItemDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, ItemDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access Item of a End
		/// <summary>
		/// Gets a list of Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<Item> GetItem(End element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(element, EndDomainRoleId);
		}
		#endregion
		#region End link accessor
		/// <summary>
		/// Get the list of EndReferencesItem links to a End.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem> GetLinksToItem ( global::UPM_IPS.RGRLLCAMSProyectoMDD.End endInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem>(endInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.EndDomainRoleId);
		}
		#endregion
		#region Item link accessor
		/// <summary>
		/// Get the list of EndReferencesItem links to a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem> GetLinksToEnd ( global::UPM_IPS.RGRLLCAMSProyectoMDD.Item itemInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem>(itemInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.ItemDomainRoleId);
		}
		#endregion
		#region EndReferencesItem instance accessors
		
		/// <summary>
		/// Get any EndReferencesItem links between a given End and a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.End source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Item target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.EndDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem link in links )
			{
				if ( target.Equals(link.Item) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one EndReferencesItem link between a given Endand a Item.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.End source, global::UPM_IPS.RGRLLCAMSProyectoMDD.Item target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.EndDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem link in links )
			{
				if ( target.Equals(link.Item) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainRelationship MainWindowReferencesSecondaryWindow
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainRelationship()]
	[DslModeling::DomainObjectId("792d7d47-28a0-44c0-880f-514846af8a9b")]
	public partial class MainWindowReferencesSecondaryWindow : DslModeling::ElementLink
	{
		#region Constructors, domain class Id
		
		/// <summary>
		/// MainWindowReferencesSecondaryWindow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x792d7d47, 0x28a0, 0x44c0, 0x88, 0x0f, 0x51, 0x48, 0x46, 0xaf, 0x8a, 0x9b);
	
				
		/// <summary>
		/// Constructor
		/// Creates a MainWindowReferencesSecondaryWindow link in the same Partition as the given MainWindow
		/// </summary>
		/// <param name="source">MainWindow to use as the source of the relationship.</param>
		/// <param name="target">SecondaryWindow to use as the target of the relationship.</param>
		public MainWindowReferencesSecondaryWindow(MainWindow source, SecondaryWindow target)
			: base((source != null ? source.Partition : null), new DslModeling::RoleAssignment[]{new DslModeling::RoleAssignment(MainWindowReferencesSecondaryWindow.MainWindowDomainRoleId, source), new DslModeling::RoleAssignment(MainWindowReferencesSecondaryWindow.SecondaryWindowDomainRoleId, target)}, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MainWindowReferencesSecondaryWindow(DslModeling::Store store, params DslModeling::RoleAssignment[] roleAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MainWindowReferencesSecondaryWindow(DslModeling::Store store, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, roleAssignments, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		public MainWindowReferencesSecondaryWindow(DslModeling::Partition partition, params DslModeling::RoleAssignment[] roleAssignments)
			: base(partition, roleAssignments, null)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new link is to be created.</param>
		/// <param name="roleAssignments">List of relationship role assignments.</param>
		/// <param name="propertyAssignments">List of properties assignments to set on the new link.</param>
		public MainWindowReferencesSecondaryWindow(DslModeling::Partition partition, DslModeling::RoleAssignment[] roleAssignments, DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, roleAssignments, propertyAssignments)
		{
		}
		#endregion
		#region MainWindow domain role code
		
		/// <summary>
		/// MainWindow domain role Id.
		/// </summary>
		public static readonly global::System.Guid MainWindowDomainRoleId = new global::System.Guid(0xfe014544, 0xa28d, 0x4393, 0xb9, 0x3a, 0x6e, 0x1b, 0x3b, 0xc3, 0x61, 0x55);
		
		/// <summary>
		/// DomainRole MainWindow
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.MainWindow
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow/MainWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow/MainWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Source, PropertyName = "SecondaryWindow", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow/MainWindow.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroMany)]
		[DslModeling::DomainObjectId("fe014544-a28d-4393-b93a-6e1b3bc36155")]
		public virtual MainWindow MainWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (MainWindow)DslModeling::DomainRoleInfo.GetRolePlayer(this, MainWindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, MainWindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access MainWindow of a SecondaryWindow
		/// <summary>
		/// Gets MainWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static MainWindow GetMainWindow(SecondaryWindow element)
		{
			return DslModeling::DomainRoleInfo.GetLinkedElement(element, SecondaryWindowDomainRoleId) as MainWindow;
		}
		
		/// <summary>
		/// Sets MainWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static void SetMainWindow(SecondaryWindow element, MainWindow newMainWindow)
		{
			DslModeling::DomainRoleInfo.SetLinkedElement(element, SecondaryWindowDomainRoleId, newMainWindow);
		}
		#endregion
		#region SecondaryWindow domain role code
		
		/// <summary>
		/// SecondaryWindow domain role Id.
		/// </summary>
		public static readonly global::System.Guid SecondaryWindowDomainRoleId = new global::System.Guid(0xb11c492e, 0xb3f4, 0x45cc, 0xba, 0xb2, 0x51, 0x57, 0x8a, 0x1f, 0x79, 0xed);
		
		/// <summary>
		/// DomainRole SecondaryWindow
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.SecondaryWindow
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow/SecondaryWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow/SecondaryWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainRole(DslModeling::DomainRoleOrder.Target, PropertyName = "MainWindow", PropertyDisplayNameKey="UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow/SecondaryWindow.PropertyDisplayName",  PropagatesCopy = DslModeling::PropagatesCopyOption.DoNotPropagateCopy, Multiplicity = DslModeling::Multiplicity.ZeroOne)]
		[DslModeling::DomainObjectId("b11c492e-b3f4-45cc-bab2-51578a1f79ed")]
		public virtual SecondaryWindow SecondaryWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return (SecondaryWindow)DslModeling::DomainRoleInfo.GetRolePlayer(this, SecondaryWindowDomainRoleId);
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetRolePlayer(this, SecondaryWindowDomainRoleId, value);
			}
		}
				
		#endregion
		#region Static methods to access SecondaryWindow of a MainWindow
		/// <summary>
		/// Gets a list of SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static DslModeling::LinkedElementCollection<SecondaryWindow> GetSecondaryWindow(MainWindow element)
		{
			return GetRoleCollection<DslModeling::LinkedElementCollection<SecondaryWindow>, SecondaryWindow>(element, MainWindowDomainRoleId);
		}
		#endregion
		#region MainWindow link accessor
		/// <summary>
		/// Get the list of MainWindowReferencesSecondaryWindow links to a MainWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow> GetLinksToSecondaryWindow ( global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindow mainWindowInstance )
		{
			return DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow>(mainWindowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.MainWindowDomainRoleId);
		}
		#endregion
		#region SecondaryWindow link accessor
		/// <summary>
		/// Get the MainWindowReferencesSecondaryWindow link to a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow GetLinkToMainWindow (global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow secondaryWindowInstance)
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow>(secondaryWindowInstance, global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.SecondaryWindowDomainRoleId);
			global::System.Diagnostics.Debug.Assert(links.Count <= 1, "Multiplicity of SecondaryWindow not obeyed.");
			if ( links.Count == 0 )
			{
				return null;
			}
			else
			{
				return links[0];
			}
		}
		#endregion
		#region MainWindowReferencesSecondaryWindow instance accessors
		
		/// <summary>
		/// Get any MainWindowReferencesSecondaryWindow links between a given MainWindow and a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::System.Collections.ObjectModel.ReadOnlyCollection<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow> GetLinks( global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindow source, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow target )
		{
			global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow> outLinks = new global::System.Collections.Generic.List<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow>();
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.MainWindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow link in links )
			{
				if ( target.Equals(link.SecondaryWindow) )
				{
					outLinks.Add(link);
				}
			}
			return outLinks.AsReadOnly();
		}
		/// <summary>
		/// Get the one MainWindowReferencesSecondaryWindow link between a given MainWindowand a SecondaryWindow.
		/// </summary>
		[global::System.Diagnostics.DebuggerStepThrough]
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Design", "CA1011")]
		public static global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow GetLink( global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindow source, global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow target )
		{
			global::System.Collections.Generic.IList<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow> links = DslModeling::DomainRoleInfo.GetElementLinks<global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow>(source, global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.MainWindowDomainRoleId);
			foreach ( global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow link in links )
			{
				if ( target.Equals(link.SecondaryWindow) )
				{
					return link;
				}
			}
			return null;
		}
		
		#endregion
	}
}
