//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using DslModeling = global::Microsoft.VisualStudio.Modeling;
using DslDesign = global::Microsoft.VisualStudio.Modeling.Design;
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass Tapiz
	/// The root in which all other elements are embedded. Appears as a diagram.
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("00df83bb-a5b2-413a-a6d9-7693254598bb")]
	public partial class Tapiz : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Tapiz domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x00df83bb, 0xa5b2, 0x413a, 0xa6, 0xd9, 0x76, 0x93, 0x25, 0x45, 0x98, 0xbb);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tapiz(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Tapiz(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Solucion domain property code
		
		/// <summary>
		/// Solucion domain property Id.
		/// </summary>
		public static readonly global::System.Guid SolucionDomainPropertyId = new global::System.Guid(0xccc53268, 0x0bbb, 0x4047, 0xad, 0x00, 0x00, 0x38, 0x0c, 0xee, 0xae, 0xe6);
		
		/// <summary>
		/// Storage for Solucion
		/// </summary>
		private global::System.String solucionPropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Solucion domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz.Solucion
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz/Solucion.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz/Solucion.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("ccc53268-0bbb-4047-ad00-00380ceeaee6")]
		public global::System.String Solucion
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return solucionPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SolucionPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Tapiz.Solucion domain property.
		/// </summary>
		internal sealed partial class SolucionPropertyHandler : DslModeling::DomainPropertyValueHandler<Tapiz, global::System.String>
		{
			private SolucionPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Tapiz.Solucion domain property value handler.
			/// </summary>
			public static readonly SolucionPropertyHandler Instance = new SolucionPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Tapiz.Solucion domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SolucionDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Tapiz element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.solucionPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Tapiz element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.solucionPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Window opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Window.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.Tapiz
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Window> Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Window>, Window>(global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.TapizDomainRoleId);
			}
		}
		#endregion
		#region End opposite domain role accessor
		
		/// <summary>
		/// Gets a list of End.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.Tapiz
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<End> End
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<End>, End>(global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.TapizDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.RGRLLCAMSProyectoMDD.Window.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.RGRLLCAMSProyectoMDD.End.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Window sourceWindow1 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Window;
			if (sourceWindow1 != null)
			{
				// Create link for path TapizHasWindow.Window
				this.Window.Add(sourceWindow1);

				return;
			}
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.End sourceEnd2 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.End;
			if (sourceEnd2 != null)
			{
				// Create link for path TapizHasEnd.End
				this.End.Add(sourceEnd2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Window sourceWindow1 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Window;
			if (sourceWindow1 != null)
			{
				// Delete link for path TapizHasWindow.Window
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.GetLinks((global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz)this, sourceWindow1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.TapizDomainRoleId, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.WindowDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.End sourceEnd2 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.End;
			if (sourceEnd2 != null)
			{
				// Delete link for path TapizHasEnd.End
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.GetLinks((global::UPM_IPS.RGRLLCAMSProyectoMDD.Tapiz)this, sourceEnd2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.TapizDomainRoleId, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.EndDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass Window
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Window
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("06487186-6334-471b-b868-126ecfd51db3")]
	public partial class Window : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Window domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x06487186, 0x6334, 0x471b, 0xb8, 0x68, 0x12, 0x6e, 0xcf, 0xd5, 0x1d, 0xb3);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Window(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Window(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x08f304af, 0xaa13, 0x4b55, 0xb8, 0x7b, 0x18, 0x86, 0x39, 0x76, 0xd9, 0x0f);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Window.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window/Name.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window/Name.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("08f304af-aa13-4b55-b87b-18863976d90f")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Window.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Window, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Window.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Window.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Window element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Window element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SizeX domain property code
		
		/// <summary>
		/// SizeX domain property Id.
		/// </summary>
		public static readonly global::System.Guid SizeXDomainPropertyId = new global::System.Guid(0x2838e048, 0xf192, 0x43c0, 0xb1, 0x03, 0x4d, 0xe8, 0xe6, 0x72, 0x1d, 0xcb);
		
		/// <summary>
		/// Storage for SizeX
		/// </summary>
		private global::System.Int16 sizeXPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SizeX domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Window.Size X
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window/SizeX.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window/SizeX.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("2838e048-f192-43c0-b103-4de8e6721dcb")]
		public global::System.Int16 SizeX
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sizeXPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SizeXPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Window.SizeX domain property.
		/// </summary>
		internal sealed partial class SizeXPropertyHandler : DslModeling::DomainPropertyValueHandler<Window, global::System.Int16>
		{
			private SizeXPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Window.SizeX domain property value handler.
			/// </summary>
			public static readonly SizeXPropertyHandler Instance = new SizeXPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Window.SizeX domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SizeXDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Window element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sizeXPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Window element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sizeXPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region SizeY domain property code
		
		/// <summary>
		/// SizeY domain property Id.
		/// </summary>
		public static readonly global::System.Guid SizeYDomainPropertyId = new global::System.Guid(0x73b44115, 0xa579, 0x43a3, 0xb9, 0xcc, 0x2f, 0x27, 0x9a, 0xb0, 0x27, 0xa3);
		
		/// <summary>
		/// Storage for SizeY
		/// </summary>
		private global::System.Int16 sizeYPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of SizeY domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Window.Size Y
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window/SizeY.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Window/SizeY.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("73b44115-a579-43a3-b9cc-2f279ab027a3")]
		public global::System.Int16 SizeY
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return sizeYPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				SizeYPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Window.SizeY domain property.
		/// </summary>
		internal sealed partial class SizeYPropertyHandler : DslModeling::DomainPropertyValueHandler<Window, global::System.Int16>
		{
			private SizeYPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Window.SizeY domain property value handler.
			/// </summary>
			public static readonly SizeYPropertyHandler Instance = new SizeYPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Window.SizeY domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return SizeYDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Window element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.sizeYPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Window element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.sizeYPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tapiz opposite domain role accessor
		/// <summary>
		/// Gets or sets Tapiz.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.Window
		/// </summary>
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.WindowDomainRoleId) as Tapiz;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasWindow.WindowDomainRoleId, value);
			}
		}
		#endregion
		#region Menu opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Menu.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.Window
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Menu> Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Menu>, Menu>(global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.WindowDomainRoleId);
			}
		}
		#endregion
		#region Button opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Button.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.Window
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Button> Button
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Button>, Button>(global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.WindowDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu.DomainClassId)) 
				{
					return true;
				}
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.RGRLLCAMSProyectoMDD.Button.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu sourceMenu1 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu;
			if (sourceMenu1 != null)
			{
				// Create link for path WindowHasMenu.Menu
				this.Menu.Add(sourceMenu1);

				return;
			}
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Button sourceButton2 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Button;
			if (sourceButton2 != null)
			{
				// Create link for path WindowHasButton.Button
				this.Button.Add(sourceButton2);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu sourceMenu1 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu;
			if (sourceMenu1 != null)
			{
				// Delete link for path WindowHasMenu.Menu
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.GetLinks((global::UPM_IPS.RGRLLCAMSProyectoMDD.Window)this, sourceMenu1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.WindowDomainRoleId, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.MenuDomainRoleId);
				}

				return;
			}
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Button sourceButton2 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Button;
			if (sourceButton2 != null)
			{
				// Delete link for path WindowHasButton.Button
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.GetLinks((global::UPM_IPS.RGRLLCAMSProyectoMDD.Window)this, sourceButton2))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.WindowDomainRoleId, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.ButtonDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass MainWindow
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MainWindow
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.MainWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("493f9492-d5e2-4729-ba51-f8dedbb7e648")]
	public partial class MainWindow : Window
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// MainWindow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x493f9492, 0xd5e2, 0x4729, 0xba, 0x51, 0xf8, 0xde, 0xdb, 0xb7, 0xe6, 0x48);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MainWindow(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public MainWindow(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region SecondaryWindow opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SecondaryWindow.
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.MainWindow
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SecondaryWindow> SecondaryWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SecondaryWindow>, SecondaryWindow>(global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.MainWindowDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass SecondaryWindow
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindow.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("09db71ac-e717-45f8-9a1b-5b1865b3da64")]
	public partial class SecondaryWindow : Window
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// SecondaryWindow domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x09db71ac, 0xe717, 0x45f8, 0x9a, 0x1b, 0x5b, 0x18, 0x65, 0xb3, 0xda, 0x64);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SecondaryWindow(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public SecondaryWindow(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region TargetSecondaryWindow opposite domain role accessor
		
		/// <summary>
		/// Gets a list of TargetSecondaryWindow.
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindow
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SecondaryWindow> TargetSecondaryWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SecondaryWindow>, SecondaryWindow>(global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.SourceSecondaryWindowDomainRoleId);
			}
		}
		#endregion
		#region SourceSecondaryWindow opposite domain role accessor
		
		/// <summary>
		/// Gets a list of SourceSecondaryWindow.
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.TargetSecondaryWindow
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<SecondaryWindow> SourceSecondaryWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<SecondaryWindow>, SecondaryWindow>(global::UPM_IPS.RGRLLCAMSProyectoMDD.SecondaryWindowReferencesTargetSecondaryWindow.TargetSecondaryWindowDomainRoleId);
			}
		}
		#endregion
		#region MainWindow opposite domain role accessor
		/// <summary>
		/// Gets or sets MainWindow.
		/// Description for
		/// UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.SecondaryWindow
		/// </summary>
		public virtual MainWindow MainWindow
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.SecondaryWindowDomainRoleId) as MainWindow;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.MainWindowReferencesSecondaryWindow.SecondaryWindowDomainRoleId, value);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass Menu
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Menu
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("c2a7d042-efae-4f26-a454-4f73bc2eec5b")]
	public partial class Menu : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Menu domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xc2a7d042, 0xefae, 0x4f26, 0xa4, 0x54, 0x4f, 0x73, 0xbc, 0x2e, 0xec, 0x5b);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Menu(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Menu(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region id domain property code
		
		/// <summary>
		/// id domain property Id.
		/// </summary>
		public static readonly global::System.Guid idDomainPropertyId = new global::System.Guid(0x3070849f, 0xb578, 0x440a, 0xb7, 0x40, 0x66, 0xef, 0xd1, 0x77, 0xfd, 0x99);
		
		/// <summary>
		/// Storage for id
		/// </summary>
		private global::System.Int16 idPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of id domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Menu.Id
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu/id.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu/id.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("3070849f-b578-440a-b740-66efd177fd99")]
		public global::System.Int16 id
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				idPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.id domain property.
		/// </summary>
		internal sealed partial class idPropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.Int16>
		{
			private idPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.id domain property value handler.
			/// </summary>
			public static readonly idPropertyHandler Instance = new idPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.id domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return idDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Title domain property code
		
		/// <summary>
		/// Title domain property Id.
		/// </summary>
		public static readonly global::System.Guid TitleDomainPropertyId = new global::System.Guid(0xa0cf9354, 0x9791, 0x4b43, 0xa9, 0xe0, 0x64, 0x2e, 0x52, 0x17, 0xe4, 0x76);
		
		/// <summary>
		/// Storage for Title
		/// </summary>
		private global::System.String titlePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Title domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Menu.Title
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu/Title.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu/Title.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("a0cf9354-9791-4b43-a9e0-642e5217e476")]
		public global::System.String Title
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return titlePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TitlePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.Title domain property.
		/// </summary>
		internal sealed partial class TitlePropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.String>
		{
			private TitlePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.Title domain property value handler.
			/// </summary>
			public static readonly TitlePropertyHandler Instance = new TitlePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.Title domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TitleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.titlePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.titlePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0xf7580e88, 0x4a15, 0x4d28, 0x8c, 0x6a, 0x57, 0xe8, 0x1f, 0xe8, 0x15, 0x2c);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Menu.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu/Name.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Menu/Name.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("f7580e88-4a15-4d28-8c6a-57e81fe8152c")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Menu.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Menu, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Menu.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Menu.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Menu element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Menu element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Window opposite domain role accessor
		/// <summary>
		/// Gets or sets Window.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.Menu
		/// </summary>
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.MenuDomainRoleId) as Window;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasMenu.MenuDomainRoleId, value);
			}
		}
		#endregion
		#region Item opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Item.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.Menu
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.MenuDomainRoleId);
			}
		}
		#endregion
		#region ElementGroupPrototype Merge methods
		/// <summary>
		/// Returns a value indicating whether the source element represented by the
		/// specified root ProtoElement can be added to this element.
		/// </summary>
		/// <param name="rootElement">
		/// The root ProtoElement representing a source element.  This can be null, 
		/// in which case the ElementGroupPrototype does not contain an ProtoElements
		/// and the code should inspect the ElementGroupPrototype context information.
		/// </param>
		/// <param name="elementGroupPrototype">The ElementGroupPrototype that contains the root ProtoElement.</param>
		/// <returns>true if the source element represented by the ProtoElement can be added to this target element.</returns>
		protected override bool CanMerge(DslModeling::ProtoElementBase rootElement, DslModeling::ElementGroupPrototype elementGroupPrototype)
		{
			if ( elementGroupPrototype == null ) throw new global::System.ArgumentNullException("elementGroupPrototype");
			
			if (rootElement != null)
			{
				DslModeling::DomainClassInfo rootElementDomainInfo = this.Partition.DomainDataDirectory.GetDomainClass(rootElement.DomainClassId);
				
				if (rootElementDomainInfo.IsDerivedFrom(global::UPM_IPS.RGRLLCAMSProyectoMDD.Item.DomainClassId)) 
				{
					return true;
				}
			}
			return base.CanMerge(rootElement, elementGroupPrototype);
		}
		
		/// <summary>
		/// Called by the Merge process to create a relationship between 
		/// this target element and the specified source element. 
		/// Typically, a parent-child relationship is established
		/// between the target element (the parent) and the source element 
		/// (the child), but any relationship can be established.
		/// </summary>
		/// <param name="sourceElement">The element that is to be related to this model element.</param>
		/// <param name="elementGroup">The group of source ModelElements that have been rehydrated into the target store.</param>
		/// <remarks>
		/// This method is overriden to create the relationship between the target element and the specified source element.
		/// The base method does nothing.
		/// </remarks>
		protected override void MergeRelate(DslModeling::ModelElement sourceElement, DslModeling::ElementGroup elementGroup)
		{
			// In general, sourceElement is allowed to be null, meaning that the elementGroup must be parsed for special cases.
			// However this is not supported in generated code.  Use double-deriving on this class and then override MergeRelate completely if you 
			// need to support this case.
			if ( sourceElement == null ) throw new global::System.ArgumentNullException("sourceElement");
		
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Item sourceItem1 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Item;
			if (sourceItem1 != null)
			{
				// Create link for path MenuHasItem.Item
				this.Item.Add(sourceItem1);

				return;
			}
		
			// Sdk workaround to runtime bug #879350 (DSL: can't copy and paste a MEL that has a MEX). Avoid MergeRelate on ModelElementExtension
			// during a "Paste".
			if (sourceElement is DslModeling::ExtensionElement
				&& sourceElement.Store.TransactionManager.CurrentTransaction.TopLevelTransaction.Context.ContextInfo.ContainsKey("{9DAFD42A-DC0E-4d78-8C3F-8266B2CF8B33}"))
			{
				return;
			}
		
			// Fall through to base class if this class hasn't handled the merge.
			base.MergeRelate(sourceElement, elementGroup);
		}
		
		/// <summary>
		/// Performs operation opposite to MergeRelate - i.e. disconnects a given
		/// element from the current one (removes links created by MergeRelate).
		/// </summary>
		/// <param name="sourceElement">Element to be unmerged/disconnected.</param>
		[global::System.Diagnostics.CodeAnalysis.SuppressMessage("Microsoft.Performance", "CA1800:DoNotCastUnnecessarily")]
		protected override void MergeDisconnect(DslModeling::ModelElement sourceElement)
		{
			if (sourceElement == null) throw new global::System.ArgumentNullException("sourceElement");
				
			global::UPM_IPS.RGRLLCAMSProyectoMDD.Item sourceItem1 = sourceElement as global::UPM_IPS.RGRLLCAMSProyectoMDD.Item;
			if (sourceItem1 != null)
			{
				// Delete link for path MenuHasItem.Item
				
				foreach (DslModeling::ElementLink link in global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.GetLinks((global::UPM_IPS.RGRLLCAMSProyectoMDD.Menu)this, sourceItem1))
				{
					// Delete the link, but without possible delete propagation to the element since it's moving to a new location.
					link.Delete(global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.MenuDomainRoleId, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.ItemDomainRoleId);
				}

				return;
			}
			// Fall through to base class if this class hasn't handled the unmerge.
			base.MergeDisconnect(sourceElement);
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass Button
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Button
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Button.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Button.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("5ef2c0bd-3d61-4943-830e-b3d667747472")]
	public partial class Button : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Button domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0x5ef2c0bd, 0x3d61, 0x4943, 0x83, 0x0e, 0xb3, 0xd6, 0x67, 0x74, 0x74, 0x72);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Button(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Button(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region id domain property code
		
		/// <summary>
		/// id domain property Id.
		/// </summary>
		public static readonly global::System.Guid idDomainPropertyId = new global::System.Guid(0x43bcbe3f, 0xea1b, 0x48fc, 0x91, 0x8b, 0xbb, 0x7c, 0x2d, 0xb0, 0x50, 0x3f);
		
		/// <summary>
		/// Storage for id
		/// </summary>
		private global::System.Int16 idPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of id domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Button.Id
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Button/id.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Button/id.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("43bcbe3f-ea1b-48fc-918b-bb7c2db0503f")]
		public global::System.Int16 id
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				idPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Button.id domain property.
		/// </summary>
		internal sealed partial class idPropertyHandler : DslModeling::DomainPropertyValueHandler<Button, global::System.Int16>
		{
			private idPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Button.id domain property value handler.
			/// </summary>
			public static readonly idPropertyHandler Instance = new idPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Button.id domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return idDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(Button element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Button element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Title domain property code
		
		/// <summary>
		/// Title domain property Id.
		/// </summary>
		public static readonly global::System.Guid TitleDomainPropertyId = new global::System.Guid(0x282b8856, 0x98ea, 0x4d4c, 0xa7, 0x25, 0x1f, 0x77, 0x8e, 0x4c, 0xd3, 0x5a);
		
		/// <summary>
		/// Storage for Title
		/// </summary>
		private global::System.String titlePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Title domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Button.Title
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Button/Title.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Button/Title.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("282b8856-98ea-4d4c-a725-1f778e4cd35a")]
		public global::System.String Title
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return titlePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TitlePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Button.Title domain property.
		/// </summary>
		internal sealed partial class TitlePropertyHandler : DslModeling::DomainPropertyValueHandler<Button, global::System.String>
		{
			private TitlePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Button.Title domain property value handler.
			/// </summary>
			public static readonly TitlePropertyHandler Instance = new TitlePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Button.Title domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TitleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Button element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.titlePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Button element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.titlePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Window opposite domain role accessor
		/// <summary>
		/// Gets or sets Window.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.Button
		/// </summary>
		public virtual Window Window
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.ButtonDomainRoleId) as Window;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.WindowHasButton.ButtonDomainRoleId, value);
			}
		}
		#endregion
		#region End opposite domain role accessor
		
		/// <summary>
		/// Gets a list of End.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.Button
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<End> End
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<End>, End>(global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.ButtonDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass Item
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Item
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Item.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Item.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("f088807a-4f48-4879-bed0-ae3bb2503a76")]
	public partial class Item : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// Item domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xf088807a, 0x4f48, 0x4879, 0xbe, 0xd0, 0xae, 0x3b, 0xb2, 0x50, 0x3a, 0x76);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Item(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public Item(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region Title domain property code
		
		/// <summary>
		/// Title domain property Id.
		/// </summary>
		public static readonly global::System.Guid TitleDomainPropertyId = new global::System.Guid(0x98f6f154, 0x4359, 0x488c, 0xa1, 0x9f, 0xa5, 0x1b, 0xea, 0x12, 0x83, 0xf8);
		
		/// <summary>
		/// Storage for Title
		/// </summary>
		private global::System.String titlePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Title domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Item.Title
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Item/Title.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Item/Title.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("98f6f154-4359-488c-a19f-a51bea1283f8")]
		public global::System.String Title
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return titlePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				TitlePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Item.Title domain property.
		/// </summary>
		internal sealed partial class TitlePropertyHandler : DslModeling::DomainPropertyValueHandler<Item, global::System.String>
		{
			private TitlePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Item.Title domain property value handler.
			/// </summary>
			public static readonly TitlePropertyHandler Instance = new TitlePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Item.Title domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return TitleDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Item element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.titlePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Item element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.titlePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Name domain property code
		
		/// <summary>
		/// Name domain property Id.
		/// </summary>
		public static readonly global::System.Guid NameDomainPropertyId = new global::System.Guid(0x1999bbbb, 0x51b7, 0x452c, 0x9a, 0x57, 0xd5, 0x90, 0xe3, 0x20, 0x38, 0x2d);
		
		/// <summary>
		/// Storage for Name
		/// </summary>
		private global::System.String namePropertyStorage = string.Empty;
		
		/// <summary>
		/// Gets or sets the value of Name domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.Item.Name
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.Item/Name.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.Item/Name.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("1999bbbb-51b7-452c-9a57-d590e320382d")]
		public global::System.String Name
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return namePropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				NamePropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the Item.Name domain property.
		/// </summary>
		internal sealed partial class NamePropertyHandler : DslModeling::DomainPropertyValueHandler<Item, global::System.String>
		{
			private NamePropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the Item.Name domain property value handler.
			/// </summary>
			public static readonly NamePropertyHandler Instance = new NamePropertyHandler();
		
			/// <summary>
			/// Gets the Id of the Item.Name domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return NameDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.String GetValue(Item element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.namePropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(Item element, global::System.String newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.String oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.namePropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Menu opposite domain role accessor
		/// <summary>
		/// Gets or sets Menu.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.Item
		/// </summary>
		public virtual Menu Menu
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.ItemDomainRoleId) as Menu;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.MenuHasItem.ItemDomainRoleId, value);
			}
		}
		#endregion
		#region End opposite domain role accessor
		
		/// <summary>
		/// Gets a list of End.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.Item
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<End> End
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<End>, End>(global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.ItemDomainRoleId);
			}
		}
		#endregion
	}
}
namespace UPM_IPS.RGRLLCAMSProyectoMDD
{
	/// <summary>
	/// DomainClass End
	/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.End
	/// </summary>
	[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.End.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.End.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
	[DslModeling::DomainModelOwner(typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel))]
	[global::System.CLSCompliant(true)]
	[DslModeling::DomainObjectId("fc724694-3a81-43a0-8b95-c78accbcb637")]
	public partial class End : DslModeling::ModelElement
	{
		#region Constructors, domain class Id
	
		/// <summary>
		/// End domain class Id.
		/// </summary>
		public static readonly new global::System.Guid DomainClassId = new global::System.Guid(0xfc724694, 0x3a81, 0x43a0, 0x8b, 0x95, 0xc7, 0x8a, 0xcc, 0xbc, 0xb6, 0x37);
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="store">Store where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public End(DslModeling::Store store, params DslModeling::PropertyAssignment[] propertyAssignments)
			: this(store != null ? store.DefaultPartitionForClass(DomainClassId) : null, propertyAssignments)
		{
		}
		
		/// <summary>
		/// Constructor
		/// </summary>
		/// <param name="partition">Partition where new element is to be created.</param>
		/// <param name="propertyAssignments">List of domain property id/value pairs to set once the element is created.</param>
		public End(DslModeling::Partition partition, params DslModeling::PropertyAssignment[] propertyAssignments)
			: base(partition, propertyAssignments)
		{
		}
		#endregion
		#region id domain property code
		
		/// <summary>
		/// id domain property Id.
		/// </summary>
		public static readonly global::System.Guid idDomainPropertyId = new global::System.Guid(0x791757b1, 0xa869, 0x4d05, 0xbe, 0x51, 0xd6, 0x15, 0x49, 0xda, 0x57, 0xeb);
		
		/// <summary>
		/// Storage for id
		/// </summary>
		private global::System.Int16 idPropertyStorage;
		
		/// <summary>
		/// Gets or sets the value of id domain property.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.End.Id
		/// </summary>
		[DslDesign::DisplayNameResource("UPM_IPS.RGRLLCAMSProyectoMDD.End/id.DisplayName", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslDesign::DescriptionResource("UPM_IPS.RGRLLCAMSProyectoMDD.End/id.Description", typeof(global::UPM_IPS.RGRLLCAMSProyectoMDD.RGRLLCAMSProyectoMDDDomainModel), "UPM_IPS.RGRLLCAMSProyectoMDD.GeneratedCode.DomainModelResx")]
		[DslModeling::DomainObjectId("791757b1-a869-4d05-be51-d61549da57eb")]
		public global::System.Int16 id
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return idPropertyStorage;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				idPropertyHandler.Instance.SetValue(this, value);
			}
		}
		/// <summary>
		/// Value handler for the End.id domain property.
		/// </summary>
		internal sealed partial class idPropertyHandler : DslModeling::DomainPropertyValueHandler<End, global::System.Int16>
		{
			private idPropertyHandler() { }
		
			/// <summary>
			/// Gets the singleton instance of the End.id domain property value handler.
			/// </summary>
			public static readonly idPropertyHandler Instance = new idPropertyHandler();
		
			/// <summary>
			/// Gets the Id of the End.id domain property.
			/// </summary>
			public sealed override global::System.Guid DomainPropertyId
			{
				[global::System.Diagnostics.DebuggerStepThrough]
				get
				{
					return idDomainPropertyId;
				}
			}
			
			/// <summary>
			/// Gets a strongly-typed value of the property on specified element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <returns>Property value.</returns>
			public override sealed global::System.Int16 GetValue(End element)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
				return element.idPropertyStorage;
			}
		
			/// <summary>
			/// Sets property value on an element.
			/// </summary>
			/// <param name="element">Element which owns the property.</param>
			/// <param name="newValue">New property value.</param>
			public override sealed void SetValue(End element, global::System.Int16 newValue)
			{
				if (element == null) throw new global::System.ArgumentNullException("element");
		
				global::System.Int16 oldValue = GetValue(element);
				if (newValue != oldValue)
				{
					ValueChanging(element, oldValue, newValue);
					element.idPropertyStorage = newValue;
					ValueChanged(element, oldValue, newValue);
				}
			}
		}
		
		#endregion
		#region Tapiz opposite domain role accessor
		/// <summary>
		/// Gets or sets Tapiz.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.End
		/// </summary>
		public virtual Tapiz Tapiz
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return DslModeling::DomainRoleInfo.GetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.EndDomainRoleId) as Tapiz;
			}
			[global::System.Diagnostics.DebuggerStepThrough]
			set
			{
				DslModeling::DomainRoleInfo.SetLinkedElement(this, global::UPM_IPS.RGRLLCAMSProyectoMDD.TapizHasEnd.EndDomainRoleId, value);
			}
		}
		#endregion
		#region Button opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Button.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.End
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Button> Button
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Button>, Button>(global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesButton.EndDomainRoleId);
			}
		}
		#endregion
		#region Item opposite domain role accessor
		
		/// <summary>
		/// Gets a list of Item.
		/// Description for UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.End
		/// </summary>
		public virtual DslModeling::LinkedElementCollection<Item> Item
		{
			[global::System.Diagnostics.DebuggerStepThrough]
			get
			{
				return GetRoleCollection<DslModeling::LinkedElementCollection<Item>, Item>(global::UPM_IPS.RGRLLCAMSProyectoMDD.EndReferencesItem.EndDomainRoleId);
			}
		}
		#endregion
	}
}
